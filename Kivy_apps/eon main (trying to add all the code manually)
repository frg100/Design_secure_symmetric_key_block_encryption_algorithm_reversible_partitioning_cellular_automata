# eon.py

print "App Starting..."
import kivy
kivy.require('1.9.0')

__version__ = "1"


from kivy.clock import Clock
from kivy.app import App
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.image import Image
from kivy.uix.textinput import TextInput
from kivy.uix.relativelayout import RelativeLayout
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.lang import Builder
from kivy.uix.togglebutton import ToggleButton
from kivy.uix.progressbar import ProgressBar
from kivy.uix.scrollview import ScrollView
from kivy.uix.popup import Popup
from kivy.core.window import Window

print "Before import"


#What gspread needs to work
''' 
from urllib import urlencode
import re
from xml.etree import ElementTree
import requests
import httplib as client
from urlparse import urlparse
from collections import defaultdict
from itertools import chain
from xml.etree.ElementTree import Element, SubElement
'''




import gspread,datetime
from oauth2client.service_account import ServiceAccountCredentials
print "Import successful!"

'''
from tinydb import TinyDB, Query
import urllib, json, os
import dropbox
'''


file_name = "db.json"

Builder.load_string("""

<MenuScreen>:
    id: menu
    name: 'menu_screen'
    BoxLayout:
        id: box_layout
        orientation: 'vertical'
        Label:
            id: label1
            text: "Welcome to EON, the Edemont Ordering Network"
            text_size: 600,None
            halign: 'center'
        Label:
            id: label2
            text: "Designed by Federico Reyes and Vivek Rao-Pothuraju"
            text_size: 600,None
            halign: 'center'
        Label:
            id: label3
            text: "Order lunch online from Edgemont High School"
            text_size: 600,None
            halign: 'center'
        BoxLayout:
            id: box_layout
            orientation: 'horizontal'
            Button:
                id: start
                text: "START"
                on_release: root.start()
                size_hint: .7,1
            Button:
                id: quit
                text: "EXIT"
                on_release: root.quit()
                size_hint: .3,1

<RestaurantScreen>:
    id: restaurant_screen
    name: 'restaurant_screen'
    BoxLayout:
        id: box_layout
        orientation: 'vertical'
        Button:
            id: test_restaurant
            text: "Test Restaurant"
            on_release: root.test_restaurant()
            size_hint: 1, .15
        Label:
            id: deli_counter
            size_hint: 1, .15
        Label:
            id: gianonnis
            size_hint: 1, .15
        Label:
            id: frank_and_joes
            size_hint: 1, .15
        Label:
            id: gennaros
            size_hint: 1, .15
        Button:
            id: back
            text: "BACK"
            on_release: root.back()
            size_hint: 1, .15


<Item@BoxLayout>:
    orientation: 'horizontal'
    TextInput:
        id: quantity
        text: '1'
        size_hint: .1,1
    TextInput:
        id: food_item
        text_hint: "Deluxe cheeseburger with fries and no pickles"
        size_hint: .9,1

<OrderScreen>:
    id: order_screen
    name: 'order_screen'
    BoxLayout:
        id: box_layout
        orientation: 'vertical'
        BoxLayout:
            id: periods
            orientation: 'horizontal'
            ToggleButton:
                id: fourth
                text: "4th"
                group: 'period'
                size_hint: .5,1
            ToggleButton:
                id: sixth
                text: "6th"
                group: 'period'
                size_hint: .5,1
                state: 'down'
        TextInput:
            id: name
            hint_text: "Firstname Lastname"
        TextInput:
            id: phone
            hint_text: '9147245692'
        Button:
            id: add_item
            text: "Add item to order"
            on_release: root.add_item()
        BoxLayout:
            id: finish_or_back
            orientation: 'horizontal'
            Button:
                id: finish_order
                text: "Finish order"
                on_release: root.finish_order()
                size_hint: .7,1
            Button:
                id: back
                text: "BACK"
                on_release: root.back()
                size_hint: .7,1

<ConfirmScreen>:
    id: confirm_screen
    name: 'confirm_screen'
    BoxLayout:
        orientation: 'vertical'
        Label:
            id: label
            text: ''
            size_hint: 1,.9
        BoxLayout:
            orientation: 'horizontal'
            Button:
                text: 'Submit'
                size_hint: .7,.3
                on_release: root.submit_order()
            Button:
                text: 'Cancel'
                size_hint: .15,.3
                on_release: root.cancel_order()
            Button:
                text: 'Edit'
                size_hint: .15,.3
                on_release: root.edit_order()


<RecieptScreen>:
    id: reciept_screen
    name: 'reciept_screen'
    BoxLayout:
        orientation: 'vertical'
        Label:
            text: 'Order submitted successfully!'
            size_hint: 1,.9
        Button:
            text: 'Main Screen'
            size_hint: 1, .3
            on_release: root.back_to_menu()


""")

def dropbox_sign_in():
    global client,db

    client = dropbox.client.DropboxClient("HN0FHYg84cAAAAAAAAAACZLrx8Bfx6UDeT_Ms3Ig81BMt1OKaCiA_vLK2-iA4sXn")
    print 'linked account: ', client.account_info()

    f, metadata = client.get_file_and_metadata('/'+file_name)
    out = open(file_name, 'wb')
    out.write(f.read())
    out.close()
    db = TinyDB(file_name)
    print metadata

class MenuScreen(Screen): 

    def start(self):
        restaurant_screen = RestaurantScreen()
        sm.add_widget(restaurant_screen)
        sm.current = 'restaurant_screen'

    def quit(self):
        exit()

class RestaurantScreen(Screen):

    """
    def __init__(self):
        self.ids.grid_layout.bind(minimum_height=self.ids.grid_layout.setter('height'))
    """

    def back(self):
        sm.remove_widget(self)
        sm.current = 'menu_screen'

    def test_restaurant(self):
        global restaurant 

        restaurant = 'test_restaurant'
        order_screen = OrderScreen()
        sm.add_widget(order_screen)
        sm.current = 'order_screen'
        order_screen.ids.box_layout.add_widget(Label(text = snake_to_camel(restaurant)), index = -1)
        order_screen.restaurant = restaurant
        order_screen.item_list = []
        order_screen.order_dict = {}


class OrderScreen(Screen):

    def back(self):
        sm.remove_widget(self)
        sm.current = 'restaurant_screen'

    def add_item(self):
        item = Item()
        self.item_list.append(item)
        self.ids.box_layout.add_widget(item, index = 2) #index of one puts it right above the 2nd to last widget

    def finish_order(self):
        global order_dict

        self.order_dict['order'] = ''
        for item in self.item_list:
            self.order_dict['order'] += "\n" + item.ids.quantity.text + ' ' + item.ids.food_item.text

        if self.ids.fourth.state == 'down':
            self.order_dict['period'] = '4th period (11:00)'
        elif self.ids.sixth.state == 'down':
            self.order_dict['period'] = '6th period (12:30)'

        self.order_dict['name'] = self.ids.name.text
        self.order_dict['phone'] = ''.join(c for c in self.ids.phone.text if c.isdigit())
        self.order_dict['order'] = self.order_dict['order'][1:]

        order_dict = self.order_dict #makes the dict global to use in another screen

        full_order = "Order by %s \n(%s) %s-%s \n%s \n%s" %(self.order_dict['name'], self.order_dict['phone'][0:3], self.order_dict['phone'][3:6],self.order_dict['phone'][6:], self.order_dict['order'],self.order_dict['period'])

        confirm_screen = ConfirmScreen()
        sm.add_widget(confirm_screen)
        confirm_screen.ids.label.text = full_order
        sm.current = 'confirm_screen'


class ConfirmScreen(Screen):

    def cancel_order(self):
        sm.clear_widgets()
        menu_screen = MenuScreen()
        sm.add_widget(menu_screen)
        sm.current = 'menu_screen'

    def edit_order(self):
        sm.remove_widget(self)
        sm.current = 'order_screen'

    def submit_order(self):
        global file_name, restaurant, order_dict

        file_name = restaurant + ".json"

        dropbox_sign_in()

        order_dict['time'] = str(datetime.datetime.now())
        db.insert(order_dict)

        global client
        f = open(file_name, 'rb')
        response = client.put_file('/'+file_name, f,overwrite = True)
        print 'uploaded: ', response

        os.remove(file_name)

        reciept_screen = RecieptScreen()
        sm.add_widget(reciept_screen)
        sm.current = 'reciept_screen'

class RecieptScreen(Screen):
    
    def back_to_menu(self):
        sm.clear_widgets()
        order_screen = None
        menu_screen = MenuScreen()
        sm.add_widget(menu_screen)
        sm.current = 'menu_screen'








def snake_to_camel(string):
    string = string.split("_")
    for x in string:
        x.capitalize()
    string = ' '.join(string)
    return string





class Item(BoxLayout):
    pass

class EdgemontOrderingNetwork(App):
    global sm

    def build(self):
        global sm
        sm = ScreenManager() #initializes a new screenmanager instance
        menu_screen = MenuScreen() #initializes a new menu instance
        sm.add_widget(menu_screen) #adds the menu instance to the screenmanager instance
        return sm #returns the screenmanager to start the app


if __name__=='__main__':
    EdgemontOrderingNetwork().run()




####
####
#### gmail: edgemontorderingnetwork@gmail.com
#### password: EdgemontEUFSD
####
####
####
#### dropbox access token: HN0FHYg84cAAAAAAAAAACZLrx8Bfx6UDeT_Ms3Ig81BMt1OKaCiA_vLK2-iA4sXn
####
####
####
####
#############################################################################################
#############################################################################################
#############################################################################################
#############################################################################################
#############################################################################################
#############################################################################################
####
####